import asyncio
import json
import os
import re
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, date
from pathlib import Path
from typing import Any, Dict, List, Optional, Set
import html
from fastapi import FastAPI, Request
from aiogram import types
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.types import Message, Chat
from dotenv import load_dotenv

# ========= –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =========
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
BASE_URL = os.getenv("BASE_URL")                  # –Ω–∞–ø—Ä. https://parahod.onrender.com
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")
# –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞: 1-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è = –Ω–µ–¥–µ–ª—è, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
SEMESTER_START_ENV = os.getenv("SEMESTER_START")  # YYYY-MM-DD
DATA_DIR = Path("./data"); DATA_DIR.mkdir(exist_ok=True)
SCHEDULE_FILE = DATA_DIR / "schedules_semester.json"
USERS_FILE = DATA_DIR / "users.json"
SEM_FILE = DATA_DIR / "semester.json"

# —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
SLOTS = {
    1: "8:30-10:05",
    2: "10:20-11:55",
    3: "12:10-13:45",
    4: "14:45-16:20",
}

RU_WEEKDAYS = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]


# ===== –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ =====
ROOM_DIGITS_RE = re.compile(r"^\d{1,5}$")  # –¥–æ–ø—É—Å–∫–∞–µ–º 1..5 —Ü–∏—Ñ—Ä (–ø–æ–¥–ø—Ä–∞–≤—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
ROOM_CANON = {"–¥/–æ": "–¥/–æ", "—Å/–∑–∞–ª": "—Å/–∑–∞–ª"}

def _normalize_room_token(tok: str) -> str:
    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–µ—à–∞
    return tok.strip().lower().replace("\\", "/")

def _parse_room_from_tokens(tokens: List[str], start_idx: int):
    """
    –ë–µ—Ä—ë–º –†–û–í–ù–û –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –Ω–∞—á–∏–Ω–∞—è —Å start_idx.
    –†–∞–∑—Ä–µ—à–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ò–õ–ò '–¥/–æ' –ò–õ–ò '—Å/–∑–∞–ª'.
    """
    if start_idx >= len(tokens):
        return None, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, '–¥/–æ' –∏–ª–∏ '—Å/–∑–∞–ª'."
    # –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∏–º ¬´—Å–ª–æ–≤–æ–º¬ª
    if len(tokens[start_idx:]) != 1:
        return None, "–ê—É–¥–∏—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ü–∏—Ñ—Ä—ã, '–¥/–æ' –∏–ª–∏ '—Å/–∑–∞–ª'."

    raw = _normalize_room_token(tokens[start_idx])
    if raw in ROOM_CANON:
        return ROOM_CANON[raw], None
    if ROOM_DIGITS_RE.fullmatch(raw):
        return raw, None
    return None, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, '–¥/–æ' –∏–ª–∏ '—Å/–∑–∞–ª'."



# ========= –ú–æ–¥–µ–ª—å =========
@dataclass
class Lesson:
    title: str
    room: str
    weeks_spec: str        # –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä. "2-4,10"
    weeks: List[int]       # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å (1..N)
    parity: Optional[str]  # "odd" | "even" | None

def _load_json(path: Path, default: Any):
    if path.exists():
        try:
            return json.loads(path.read_text("utf-8"))
        except json.JSONDecodeError:
            return default
    return default

def _save_json(path: Path, data: Any):
    path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

def load_users() -> Dict[str, str]:
    return _load_json(USERS_FILE, {})

def save_users(d: Dict[str, str]):
    _save_json(USERS_FILE, d)

def load_semester_start() -> Optional[date]:
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ñ–∞–π–ª -> .env
    d = _load_json(SEM_FILE, {})
    s = d.get("semester_start") or SEMESTER_START_ENV
    if not s: return None
    try:
        return datetime.strptime(s, "%Y-%m-%d").date()
    except ValueError:
        return None

def save_semester_start(dstr: str):
    _save_json(SEM_FILE, {"semester_start": dstr})

def load_schedules() -> Dict[str, Dict[str, Dict[str, Any]]]:
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
    schedules[group][day][slot] = Lesson-dict
    """
    return _load_json(SCHEDULE_FILE, {})

def save_schedules(d: Dict[str, Dict[str, Dict[str, Any]]]):
    _save_json(SCHEDULE_FILE, d)

# ========= –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–µ–ª—å =========
range_re = re.compile(r"^\s*(\d+)\s*-\s*(\d+)\s*$")
num_re = re.compile(r"^\s*(\d+)\s*$")

def parse_weeks(spec: str, max_week: int = 30) -> List[int]:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç "2-4,10" -> [2,3,4,10]
    –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ max_week.
    """
    if not spec:
        # –ø—É—Å—Ç–æ = —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–∞—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤—Å–µ—Ö –Ω–µ–¥–µ–ª—è—Ö 1..max_week
        return list(range(1, max_week + 1))
    weeks: Set[int] = set()
    for part in spec.split(","):
        part = part.strip()
        if not part: continue
        m = range_re.match(part)
        if m:
            a, b = int(m.group(1)), int(m.group(2))
            if a > b: a, b = b, a
            for w in range(a, b + 1):
                if 1 <= w <= max_week: weeks.add(w)
            continue
        m = num_re.match(part)
        if m:
            w = int(m.group(1))
            if 1 <= w <= max_week: weeks.add(w)
    return sorted(weeks) if weeks else list(range(1, max_week + 1))

def detect_parity(token: str) -> Optional[str]:
    t = token.lower().replace(" ", "")
    if t in ("–Ω/–Ω", "–Ω-–Ω", "–Ω–Ω", "odd"): return "odd"
    if t in ("—á/–Ω", "—á-–Ω", "—á–Ω", "even"): return "even"
    return None

def week_number(today: date, start: date) -> int:
    """1-—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ –¥–µ–Ω—å start; –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è."""
    delta_days = (today - start).days
    return (delta_days // 7) + 1 if delta_days >= 0 else 0  # 0 => –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞

def weekday_ru(dt: datetime) -> str:
    return RU_WEEKDAYS[dt.weekday()]

def lesson_matches_week(lesson: Lesson, wk: int) -> bool:
    if wk <= 0:  # –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        return False
    if wk not in lesson.weeks:
        return False
    if lesson.parity == "odd" and wk % 2 == 0:
        return False
    if lesson.parity == "even" and wk % 2 == 1:
        return False
    return True

# ========= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ =========
bot = Bot(TOKEN)
dp = Dispatcher()

# ========= –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ =========
def format_day(group: str, day: str, wk: int, schedules: Dict[str, Dict[str, Dict[str, Any]]]) -> str:
    items = []
    group_data = schedules.get(group, {})
    day_data = group_data.get(day, {})
    for slot in sorted(SLOTS.keys()):
        raw = day_data.get(str(slot))
        if not raw:
            continue
        lesson = Lesson(**raw)
        if lesson_matches_week(lesson, wk):
            title = sanitize_title(lesson.title)
            badge = room_badge(lesson.room)
            items.append(f"{slot}) <code>{SLOTS[slot]}</code> ‚Ä¢ {e(title)}  &lt;{badge}{e(lesson.room)}&gt;")
    head = f"üìÖ <b>{e(group)} ‚Äî {e(day.capitalize())}</b> ‚Ä¢ –Ω–µ–¥–µ–ª—è #{wk}"
    return head + ("\n" + "\n".join(items) if items else "\n–ü–∞—Ä –Ω–µ—Ç.")

def format_week(group: str, start_dt: date, schedules: Dict[str, Dict[str, Dict[str, Any]]]) -> str:
    today = datetime.now().date()
    wk = week_number(today, start_dt)
    lines = [f"üóìÔ∏è <b>{e(group)} ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è #{wk})</b>"]
    for dname in RU_WEEKDAYS:
        lines.append(f"\n<b>{e(dname.capitalize())}</b>")
        day_data = schedules.get(group, {}).get(dname, {})
        any_shown = False
        for slot in sorted(SLOTS.keys()):
            raw = day_data.get(str(slot))
            if not raw:
                continue
            lesson = Lesson(**raw)
            if lesson_matches_week(lesson, wk):
                title = sanitize_title(lesson.title)
                badge = room_badge(lesson.room)
                lines.append(f"{slot}) <code>{SLOTS[slot]}</code> ‚Ä¢ {e(title)}  &lt;{badge}{e(lesson.room)}&gt;")
                any_shown = True
        if not any_shown:
            lines.append("‚Äî –Ω–µ—Ç –ø–∞—Ä")
    return "\n".join(lines)



DAY_SET = set(RU_WEEKDAYS)

def sanitize_title(title: str) -> str:
    """
    –£–±–∏—Ä–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à—É–º –≤–∏–¥–∞: '01 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 2 ', '—Å—Ä–µ–¥–∞ 1 ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '01' –∏ —Ç.–ø.
    –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ –¥–µ–Ω—å/–Ω–æ–º–µ—Ä.
    """
    t = title.strip()
    low = t.lower()

    # —É–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–µ —á–∏—Å–ª–∞ (0..2 —Ü–∏—Ñ—Ä—ã ‚Äî —á–∞—Å—Ç–æ '01'/'1')
    i = 0
    while i < len(low) and low[i].isdigit():
        i += 1
    if i > 0 and i <= 2:
        low = low[i:].lstrip()
        t = t[i:].lstrip()

    # –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è ‚Äî –≤—ã—Ä–µ–∂–µ–º –µ–≥–æ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞
    for day in RU_WEEKDAYS:
        if low.startswith(day):
            # —Å—Ä–µ–∑–∞–µ–º —Å–∞–º –¥–µ–Ω—å
            pos = len(day)
            low = low[pos:].lstrip()
            t   = t[pos:].lstrip()
            # —Å—Ä–µ–∂–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–∏–ø–∞ '2') —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–Ω—è
            j = 0
            while j < len(low) and low[j].isdigit():
                j += 1
            if j == 1:  # —Å–ª–æ—Ç ‚Äî –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ 1..4
                low = low[j:].lstrip()
                t   = t[j:].lstrip()
            break

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—á–∏—Å—Ç–∫–∞ –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    t = re.sub(r"\s{2,}", " ", t).strip()
    return t

def room_badge(room: str) -> str:
    r = room.lower()
    if r == "–¥/–æ":
        return "üñ•Ô∏è"
    if r == "—Å/–∑–∞–ª":
        return "üèüÔ∏è"
    return "üè´"  # —Ü–∏—Ñ—Ä—ã

def e(s: str) -> str:
    return html.escape(s)



# ========= –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =========
@dp.message(CommandStart())
async def start(m: Message):
    sem = load_semester_start()
    sem_info = f"\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞: {sem}" if sem else "\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ (–ø–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∞ /set_semester YYYY-MM-DD)."
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∂—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –Ω–æ–º–µ—Ä–∞ —É—á–µ–±–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –∏ —á—ë—Ç–Ω–æ—Å—Ç–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /parahod —Å–µ–≥–æ–¥–Ω—è [–≥—Ä—É–ø–ø–∞]\n"
        "‚Ä¢ /parahod –∑–∞–≤—Ç—Ä–∞ [–≥—Ä—É–ø–ø–∞]\n"
        "‚Ä¢ /parahod –Ω–µ–¥–µ–ª—è [–≥—Ä—É–ø–ø–∞]\n"
        "‚Ä¢ /setgroup <–≥—Ä—É–ø–ø–∞> ‚Äî –∑–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
        + sem_info
    )

def scope_id(m: Message) -> str:
    # –æ–¥–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —á–∞—Ç/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
    if m.chat.type in {"group", "supergroup", "channel"}:
        return str(m.chat.id)
    # –≤ –ª–∏—á–∫–µ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    return str(m.from_user.id)

async def is_chat_admin(message: Message) -> bool:
    # –≤ –ª–∏—á–∫–µ ‚Äî –≤—Å–µ–≥–¥–∞ –æ–∫
    if message.chat.type == "private":
        return True
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in {"administrator", "creator"}
    except Exception:
        return False

async def _setgroup_impl(m: Message, args: str):
    args = (args or "").strip()
    # –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if not args:
        target = "–¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞" if m.chat.type != "private" else "–¥–ª—è —Ç–µ–±—è"
        await m.answer(f"–£–∫–∞–∂–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É {target}: /setgroup –ò–í–¢-21")
        return

    # –≤ –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö –º–µ–Ω—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if m.chat.type in {"group", "supergroup", "channel"}:
        if not await is_chat_admin(m):
            await m.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É.")
            return

    users = load_users()
    users[scope_id(m)] = args
    save_users(users)
    where = "–¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞" if m.chat.type in {"group","supergroup","channel"} else "–¥–ª—è —Ç–µ–±—è"
    await m.answer(f"–û–∫, –∑–∞–ø–æ–º–Ω–∏–ª {where}: <b>{html.escape(args)}</b>", parse_mode="HTML")

@dp.message(Command("setgroup"))
async def setgroup_msg(m: Message, command: CommandObject):
    await _setgroup_impl(m, command.args)

@dp.channel_post(Command("setgroup"))
async def setgroup_channel(m: Message, command: CommandObject):
    await _setgroup_impl(m, command.args)


@dp.message(Command("parahod"))
async def parahod(m: Message, command: CommandObject):
    raw = (command.args or "").strip()
    parts = raw.split()
    if not parts:
        await m.answer("–§–æ—Ä–º–∞—Ç: /parahod —Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–Ω–µ–¥–µ–ª—è [—É—á–µ–±–Ω–∞—è_–≥—Ä—É–ø–ø–∞]")
        return

    mode = parts[0].lower()
    # –µ—Å–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–ª–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if len(parts) > 1:
        group = " ".join(parts[1:])
    else:
        group = load_users().get(scope_id(m))  # –±–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not group:
        hint = ("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —á–∞—Ç–∞: /setgroup –ò–í–¢-21"
                if m.chat.type in {"group","supergroup"}
                else "–£–∫–∞–∂–∏ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É: /setgroup –ò–í–¢-21")
        await m.answer(hint)
        return

    sem = load_semester_start()
    if not sem:
        await m.answer("–ù–µ –∑–∞–¥–∞–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞. –ü–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∞: /set_semester YYYY-MM-DD")
        return

    schedules = load_schedules()
    now = datetime.now()
    if mode in ("—Å–µ–≥–æ–¥–Ω—è", "segodnya"):
        wk = week_number(now.date(), sem)
        day = weekday_ru(now)
        await m.answer(format_day(group, day, wk, schedules), parse_mode="HTML")
    elif mode in ("–∑–∞–≤—Ç—Ä–∞", "zavtra"):
        tmr = now + timedelta(days=1)
        wk = week_number(tmr.date(), sem)
        day = weekday_ru(tmr)
        await m.answer(format_day(group, day, wk, schedules), parse_mode="HTML")
    elif mode in ("–Ω–µ–¥–µ–ª—è", "–Ω–µ–¥–µ–ª—é", "nedelya"):
        await m.answer(format_week(group, sem, schedules), parse_mode="HTML")
    else:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π: —Å–µ–≥–æ–¥–Ω—è | –∑–∞–≤—Ç—Ä–∞ | –Ω–µ–¥–µ–ª—è")

@dp.channel_post(Command("parahod"))
async def parahod_channel(m: Message, command: CommandObject):
    # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è Message
    await parahod(m, command)

# ========= –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã =========
def is_admin(uid: int) -> bool:
    return ADMIN_ID and uid == ADMIN_ID

@dp.message(Command("set_semester"))
async def set_semester(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    d = (command.args or "").strip()
    try:
        datetime.strptime(d, "%Y-%m-%d")
    except Exception:
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_semester YYYY-MM-DD")
        return
    save_semester_start(d)
    await m.answer(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {d}")

def parse_add_lesson_args(args: str):
    """
    –û–∂–∏–¥–∞–µ–º: <–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å> <—Å–ª–æ—Ç> <–ù–∞–∑–≤–∞–Ω–∏–µ(–Ω–µ–¥–µ–ª–∏)> [–Ω/–Ω|—á/–Ω] <–∞—É–¥–∏—Ç–æ—Ä–∏—è>
    –ü—Ä–∏–º–µ—Ä—ã:
      –ò–í–¢-21 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 2 –ê–ª–≥–µ–±—Ä–∞(2-13) –Ω/–Ω 101
      –ò–í–¢-21 –≤—Ç–æ—Ä–Ω–∏–∫ 1 –§–∏–∑–∏–∫–∞(2-4,10) 202
      –ò–í–¢-21 —Å—Ä–µ–¥–∞ 3 –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ( ) —á/–Ω –¥/–æ
      –ò–í–¢-21 —á–µ—Ç–≤–µ—Ä–≥ 4 –°–ø–æ—Ä—Ç(1-16) —Å/–∑–∞–ª
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, '–¥/–æ' –∏–ª–∏ '—Å/–∑–∞–ª'.
    """
    parts = args.split()
    if len(parts) < 4:
        return None, "–ú–∏–Ω–∏–º—É–º 4 —á–∞—Å—Ç–∏: <–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å> <—Å–ª–æ—Ç> <–ù–∞–∑–≤–∞–Ω–∏–µ(–Ω–µ–¥–µ–ª–∏)> ..."

    group = parts[0]
    day = parts[1].lower()
    if day not in RU_WEEKDAYS:
        return None, f"–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {', '.join(RU_WEEKDAYS)}"

    try:
        slot = int(parts[2])
        if slot not in SLOTS:
            return None, f"–°–ª–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1..{len(SLOTS)}"
    except ValueError:
        return None, "–°–ª–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 1..4"

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º —Ö–≤–æ—Å—Ç, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è
    tail = args.split(parts[2], 1)[1].strip()
    if tail.startswith(str(slot)):
        tail = tail[len(str(slot)):].strip()

    # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É —Å–∫–æ–±–æ–∫ —Å –Ω–µ–¥–µ–ª—è–º–∏
    l = tail.find("(")
    r = tail.find(")")
    if l == -1 or r == -1 or r < l:
        return None, "–ù–µ –Ω–∞—à—ë–ª —Å–∫–æ–±–∫–∏ —Å –Ω–µ–¥–µ–ª—è–º–∏. –ü—Ä–∏–º–µ—Ä: –ê–ª–≥–µ–±—Ä–∞(2-13)"

    title = tail[:l].strip()
    weeks_raw = tail[l+1:r].strip()  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ => –≤—Å–µ –Ω–µ–¥–µ–ª–∏
    after = tail[r+1:].strip()

    parity: Optional[str] = None
    room: Optional[str] = None

    if after:
        tokens = after.split()
        # –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —á—ë—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        if tokens:
            p = detect_parity(tokens[0])
            if p:
                parity = p
                room, room_err = _parse_room_from_tokens(tokens, 1)
            else:
                room, room_err = _parse_room_from_tokens(tokens, 0)
        else:
            room_err = "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è."
        if room_err:
            return None, room_err
    else:
        return None, "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ —Å–∫–æ–±–æ–∫. –ü—Ä–∏–º–µ—Ä: ... ) 101 –∏–ª–∏ ... ) –Ω/–Ω 101"

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 30-–π)
    weeks_list = parse_weeks(weeks_raw, max_week=30)

    lesson = Lesson(
        title=title,
        room=room,                 # —É–∂–µ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º –≤–∏–¥–µ: —Ü–∏—Ñ—Ä—ã / '–¥/–æ' / '—Å/–∑–∞–ª'
        weeks_spec=weeks_raw or "1-30",
        weeks=weeks_list,
        parity=parity
    )
    return (group, day, slot, lesson), None

@dp.message(Command("add_lesson"))
async def add_lesson(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    args = (command.args or "").strip()
    parsed, err = parse_add_lesson_args(args)
    if err:
        await m.answer(
            "–§–æ—Ä–º–∞—Ç: /add_lesson <–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å> <—Å–ª–æ—Ç> –ù–∞–∑–≤–∞–Ω–∏–µ(–Ω–µ–¥–µ–ª–∏) [–Ω/–Ω|—á/–Ω] –ê—É–¥–∏—Ç–æ—Ä–∏—è\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /add_lesson –ò–í–¢-21 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 2 –ê–ª–≥–µ–±—Ä–∞(2-13) –Ω/–Ω 101\n"
            "‚Ä¢ /add_lesson –ò–í–¢-21 –≤—Ç–æ—Ä–Ω–∏–∫ 1 –§–∏–∑–∏–∫–∞(2-4,10) 202\n"
            f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {err}"
        )
        return

    group, day, slot, lesson = parsed
    schedules = load_schedules()
    schedules.setdefault(group, {}).setdefault(day, {})
    schedules[group][day][str(slot)] = asdict(lesson)
    save_schedules(schedules)

    par_str = {"odd":"–Ω/–Ω","even":"—á/–Ω",None:"‚Äî"}[lesson.parity]
    await m.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: **{group}** ‚Ä¢ {day} ‚Ä¢ {slot}) {SLOTS[slot]}\n"
        f"{lesson.title} ({lesson.room})\n"
        f"–ù–µ–¥–µ–ª–∏: {lesson.weeks_spec} ‚Ä¢ –ü–∞—Ä–∏—Ç–µ—Ç: {par_str}",
        parse_mode="HTML"
    )

@dp.message(Command("del_lesson"))
async def del_lesson(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    args = (command.args or "").strip().split()
    if len(args) < 3:
        await m.answer("–§–æ—Ä–º–∞—Ç: /del_lesson <–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å> <—Å–ª–æ—Ç>")
        return
    group, day, slot_s = args[0], args[1].lower(), args[2]
    if day not in RU_WEEKDAYS:
        await m.answer(f"–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {', '.join(RU_WEEKDAYS)}"); return
    try:
        slot = int(slot_s)
        if slot not in SLOTS: raise ValueError()
    except ValueError:
        await m.answer("–°–ª–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 1..4"); return

    schedules = load_schedules()
    if schedules.get(group, {}).get(day, {}).pop(str(slot), None) is None:
        await m.answer("–¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        save_schedules(schedules)
        await m.answer("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.")

@dp.message(Command("show_day"))
async def show_day(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        await m.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    args = (command.args or "").strip().split()
    if len(args) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /show_day <–≥—Ä—É–ø–ø–∞> <–¥–µ–Ω—å>")
        return
    group, day = args[0], args[1].lower()
    schedules = load_schedules()
    day_data = schedules.get(group, {}).get(day, {})
    if not day_data:
        await m.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return
    lines = [f"**{group} ‚Äî {day.capitalize()}**"]
    for slot in sorted(map(int, day_data.keys())):
        l = Lesson(**day_data[str(slot)])
        par_str = {"odd":"–Ω/–Ω","even":"—á/–Ω",None:"‚Äî"}[l.parity]
        lines.append(f"{slot}) {SLOTS[slot]} ‚Ä¢ {l.title} ({l.room}) ‚Ä¢ –Ω–µ–¥–µ–ª–∏: {l.weeks_spec} ‚Ä¢ {par_str}")
    await m.answer("\n".join(lines), parse_mode="HTML")

# ========= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =========



app = FastAPI()

@app.on_event("startup")
async def on_startup():
    if not BASE_URL:
        raise RuntimeError("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω")
    await bot.set_webhook(f"{BASE_URL}{WEBHOOK_PATH}", secret_token=WEBHOOK_SECRET)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()


@app.get("/")
async def root():
    return {"ok": True, "service": "parahod-bot"}

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return {"ok": False}
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

